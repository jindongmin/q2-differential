
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace disease_single_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 64> locations_array__ = 
{" (found before start of program)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 20, column 2 to column 15)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 21, column 2 to column 10)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 22, column 2 to column 10)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 24, column 2 to column 34)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 25, column 2 to column 19)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 26, column 2 to column 30)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 27, column 2 to column 52)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 28, column 2 to column 21)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 29, column 2 to column 65)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 34, column 2 to column 16)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 35, column 2 to column 16)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 36, column 2 to column 18)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 39, column 4 to column 19)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 42, column 8 to column 37)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 40, column 4 to line 42, column 37)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 43, column 4 to column 75)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 44, column 4 to column 97)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 38, column 17 to line 46, column 3)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 38, column 2 to line 46, column 3)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 67, column 2 to column 22)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 68, column 2 to column 22)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 70, column 4 to column 58)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 71, column 4 to column 66)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 69, column 16 to line 72, column 3)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 69, column 2 to line 72, column 3)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 51, column 2 to column 20)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 52, column 2 to column 49)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 53, column 2 to column 26)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 54, column 2 to column 48)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 56, column 2 to column 31)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 58, column 2 to column 38)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 59, column 2 to column 46)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 60, column 2 to column 46)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 63, column 2 to column 35)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 2, column 2 to column 17)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 3, column 2 to column 17)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 4, column 2 to column 17)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 5, column 2 to column 17)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 6, column 12 to column 13)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 6, column 2 to column 15)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 7, column 8 to column 9)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 7, column 2 to column 11)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 8, column 13 to column 14)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 8, column 2 to column 16)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 9, column 16 to column 17)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 9, column 2 to column 19)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 10, column 18 to column 19)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 10, column 2 to column 21)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 12, column 2 to column 18)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 13, column 2 to column 18)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 14, column 2 to column 19)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 15, column 2 to column 21)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 16, column 2 to column 19)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 20, column 12 to column 13)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 24, column 29 to column 32)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 25, column 16 to column 17)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 26, column 27 to column 28)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 29, column 54 to column 55)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 34, column 9 to column 10)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 35, column 9 to column 10)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 36, column 9 to column 10)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 67, column 9 to column 10)",
 " (in '/mnt/ceph/users/djin/git/q2-differential/q2_differential/assets/disease_single.stan', line 68, column 9 to column 10)"};



class disease_single_model final : public model_base_crtp<disease_single_model> {

 private:
  int C;
  int N;
  int B;
  int D;
  std::vector<double> slog;
  std::vector<int> y;
  std::vector<int> cc_ids;
  std::vector<int> batch_ids;
  std::vector<int> disease_ids;
  double diff_scale;
  double disp_scale;
  double control_loc;
  double control_scale;
  double batch_scale;
  int disease_disp_1dim__; 
  
 
 public:
  ~disease_single_model() { }
  
  inline std::string model_name() const final { return "disease_single_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  disease_single_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "disease_single_model_namespace::disease_single_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 35;
      context__.validate_dims("data initialization","C","int",
           std::vector<size_t>{});
      C = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 35;
      check_greater_or_equal(function__, "C", C, 0);
      current_statement__ = 36;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 36;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 36;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization","B","int",
           std::vector<size_t>{});
      B = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      B = context__.vals_i("B")[(1 - 1)];
      current_statement__ = 37;
      check_greater_or_equal(function__, "B", B, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization","D","int",
           std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 38;
      check_greater_or_equal(function__, "D", D, 0);
      current_statement__ = 39;
      validate_non_negative_index("slog", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","slog","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      slog = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 40;
      slog = context__.vals_r("slog");
      current_statement__ = 41;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 42;
      y = context__.vals_i("y");
      current_statement__ = 43;
      validate_non_negative_index("cc_ids", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","cc_ids","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      cc_ids = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 44;
      cc_ids = context__.vals_i("cc_ids");
      current_statement__ = 45;
      validate_non_negative_index("batch_ids", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","batch_ids","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      batch_ids = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 46;
      batch_ids = context__.vals_i("batch_ids");
      current_statement__ = 47;
      validate_non_negative_index("disease_ids", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","disease_ids","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      disease_ids = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 48;
      disease_ids = context__.vals_i("disease_ids");
      current_statement__ = 49;
      context__.validate_dims("data initialization","diff_scale","double",
           std::vector<size_t>{});
      diff_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      diff_scale = context__.vals_r("diff_scale")[(1 - 1)];
      current_statement__ = 50;
      context__.validate_dims("data initialization","disp_scale","double",
           std::vector<size_t>{});
      disp_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      disp_scale = context__.vals_r("disp_scale")[(1 - 1)];
      current_statement__ = 51;
      context__.validate_dims("data initialization","control_loc","double",
           std::vector<size_t>{});
      control_loc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      control_loc = context__.vals_r("control_loc")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization","control_scale","double",
           std::vector<size_t>{});
      control_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      control_scale = context__.vals_r("control_scale")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","batch_scale","double",
           std::vector<size_t>{});
      batch_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      batch_scale = context__.vals_r("batch_scale")[(1 - 1)];
      current_statement__ = 54;
      validate_non_negative_index("diff", "D", D);
      current_statement__ = 55;
      disease_disp_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      disease_disp_1dim__ = (D + 1);
      current_statement__ = 55;
      validate_non_negative_index("disease_disp", "D + 1",
                                  disease_disp_1dim__);
      current_statement__ = 56;
      validate_non_negative_index("batch_mu", "B", B);
      current_statement__ = 57;
      validate_non_negative_index("batch_disp", "B", B);
      current_statement__ = 58;
      validate_non_negative_index("control", "C", C);
      current_statement__ = 59;
      validate_non_negative_index("lam", "N", N);
      current_statement__ = 60;
      validate_non_negative_index("phi", "N", N);
      current_statement__ = 61;
      validate_non_negative_index("alpha", "N", N);
      current_statement__ = 62;
      validate_non_negative_index("y_predict", "N", N);
      current_statement__ = 63;
      validate_non_negative_index("log_lhood", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = D + 1 + 1 + disease_disp_1dim__ + B + B + 1 + 1 + C;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "disease_single_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> diff;
      diff = std::vector<local_scalar_t__>(D, DUMMY_VAR__);
      
      current_statement__ = 1;
      diff = in__.template read<std::vector<local_scalar_t__>>(D);
      local_scalar_t__ a0;
      a0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      a0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ a1;
      a1 = DUMMY_VAR__;
      
      current_statement__ = 3;
      a1 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> disease_disp;
      disease_disp = std::vector<local_scalar_t__>(disease_disp_1dim__, DUMMY_VAR__);
      
      
      current_statement__ = 4;
      disease_disp = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, disease_disp_1dim__);
      std::vector<local_scalar_t__> batch_mu;
      batch_mu = std::vector<local_scalar_t__>(B, DUMMY_VAR__);
      
      current_statement__ = 5;
      batch_mu = in__.template read<std::vector<local_scalar_t__>>(B);
      std::vector<local_scalar_t__> batch_disp;
      batch_disp = std::vector<local_scalar_t__>(B, DUMMY_VAR__);
      
      current_statement__ = 6;
      batch_disp = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                     0, lp__, B);
      local_scalar_t__ control_mu;
      control_mu = DUMMY_VAR__;
      
      current_statement__ = 7;
      control_mu = in__.template read_constrain_offset_multiplier<local_scalar_t__, jacobian__>(
                     control_loc, 3, lp__);
      local_scalar_t__ control_sigma;
      control_sigma = DUMMY_VAR__;
      
      current_statement__ = 8;
      control_sigma = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> control;
      control = Eigen::Matrix<local_scalar_t__, -1, 1>(C);
      stan::math::fill(control, DUMMY_VAR__);
      
      current_statement__ = 9;
      control = in__.template read_constrain_offset_multiplier<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                  control_mu, control_sigma, lp__, C);
      Eigen::Matrix<local_scalar_t__, -1, 1> lam;
      lam = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(lam, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(phi, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 19;
      for (int n = 1; n <= N; ++n) {
        local_scalar_t__ delta;
        delta = DUMMY_VAR__;
        
        current_statement__ = 13;
        delta = 0;
        current_statement__ = 15;
        if (logical_gt(rvalue(disease_ids, "disease_ids", index_uni(n)), 0)) {
          current_statement__ = 14;
          delta = rvalue(diff, "diff",
                    index_uni(rvalue(disease_ids, "disease_ids",
                                index_uni(n))));
        } 
        current_statement__ = 16;
        assign(lam,
          (((rvalue(slog, "slog", index_uni(n)) +
              rvalue(control, "control",
                index_uni(rvalue(cc_ids, "cc_ids", index_uni(n))))) + delta)
            +
            rvalue(batch_mu, "batch_mu",
              index_uni(rvalue(batch_ids, "batch_ids", index_uni(n))))),
          "assigning variable lam", index_uni(n));
        current_statement__ = 17;
        assign(phi,
          inv(
            ((stan::math::exp((a1 - rvalue(lam, "lam", index_uni(n)))) +
               rvalue(disease_disp, "disease_disp",
                 index_uni((rvalue(disease_ids, "disease_ids", index_uni(n))
                             + 1)))) +
              rvalue(batch_disp, "batch_disp",
                index_uni(rvalue(batch_ids, "batch_ids", index_uni(n)))))),
          "assigning variable phi", index_uni(n));
      }
      {
        current_statement__ = 26;
        lp_accum__.add(normal_lpdf<propto__>(a1, 1, 1));
        current_statement__ = 27;
        lp_accum__.add(
          lognormal_lpdf<propto__>(disease_disp, stan::math::log(0.1),
            disp_scale));
        current_statement__ = 28;
        lp_accum__.add(normal_lpdf<propto__>(batch_mu, 0, 3));
        current_statement__ = 29;
        lp_accum__.add(
          lognormal_lpdf<propto__>(batch_disp, stan::math::log(0.1),
            batch_scale));
        current_statement__ = 30;
        lp_accum__.add(normal_lpdf<propto__>(diff, 0, diff_scale));
        current_statement__ = 31;
        lp_accum__.add(normal_lpdf<propto__>(control_mu, control_loc, 3));
        current_statement__ = 32;
        lp_accum__.add(
          lognormal_lpdf<propto__>(control_sigma, 0, control_scale));
        current_statement__ = 33;
        lp_accum__.add(
          normal_lpdf<propto__>(control, control_mu, control_sigma));
        current_statement__ = 34;
        lp_accum__.add(neg_binomial_2_log_lpmf<propto__>(y, lam, phi));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "disease_single_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> diff;
      diff = std::vector<double>(D, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      diff = in__.template read<std::vector<local_scalar_t__>>(D);
      double a0;
      a0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      a0 = in__.template read<local_scalar_t__>();
      double a1;
      a1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      a1 = in__.template read<local_scalar_t__>();
      std::vector<double> disease_disp;
      disease_disp = std::vector<double>(disease_disp_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      disease_disp = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, disease_disp_1dim__);
      std::vector<double> batch_mu;
      batch_mu = std::vector<double>(B, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 5;
      batch_mu = in__.template read<std::vector<local_scalar_t__>>(B);
      std::vector<double> batch_disp;
      batch_disp = std::vector<double>(B, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 6;
      batch_disp = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                     0, lp__, B);
      double control_mu;
      control_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      control_mu = in__.template read_constrain_offset_multiplier<local_scalar_t__, jacobian__>(
                     control_loc, 3, lp__);
      double control_sigma;
      control_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      control_sigma = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> control;
      control = Eigen::Matrix<double, -1, 1>(C);
      stan::math::fill(control, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      control = in__.template read_constrain_offset_multiplier<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                  control_mu, control_sigma, lp__, C);
      Eigen::Matrix<double, -1, 1> lam;
      lam = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(lam, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(diff[(sym1__ - 1)]);
      }
      vars__.emplace_back(a0);
      vars__.emplace_back(a1);
      for (int sym1__ = 1; sym1__ <= disease_disp_1dim__; ++sym1__) {
        vars__.emplace_back(disease_disp[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        vars__.emplace_back(batch_mu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        vars__.emplace_back(batch_disp[(sym1__ - 1)]);
      }
      vars__.emplace_back(control_mu);
      vars__.emplace_back(control_sigma);
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        vars__.emplace_back(control[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 19;
      for (int n = 1; n <= N; ++n) {
        double delta;
        delta = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 13;
        delta = 0;
        current_statement__ = 15;
        if (logical_gt(rvalue(disease_ids, "disease_ids", index_uni(n)), 0)) {
          current_statement__ = 14;
          delta = rvalue(diff, "diff",
                    index_uni(rvalue(disease_ids, "disease_ids",
                                index_uni(n))));
        } 
        current_statement__ = 16;
        assign(lam,
          (((rvalue(slog, "slog", index_uni(n)) +
              rvalue(control, "control",
                index_uni(rvalue(cc_ids, "cc_ids", index_uni(n))))) + delta)
            +
            rvalue(batch_mu, "batch_mu",
              index_uni(rvalue(batch_ids, "batch_ids", index_uni(n))))),
          "assigning variable lam", index_uni(n));
        current_statement__ = 17;
        assign(phi,
          inv(
            ((stan::math::exp((a1 - rvalue(lam, "lam", index_uni(n)))) +
               rvalue(disease_disp, "disease_disp",
                 index_uni((rvalue(disease_ids, "disease_ids", index_uni(n))
                             + 1)))) +
              rvalue(batch_disp, "batch_disp",
                index_uni(rvalue(batch_ids, "batch_ids", index_uni(n)))))),
          "assigning variable phi", index_uni(n));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(lam[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(phi[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(alpha[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y_predict;
      y_predict = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y_predict, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lhood;
      log_lhood = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_lhood, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 25;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 22;
        assign(y_predict,
          neg_binomial_2_log_rng(rvalue(lam, "lam", index_uni(n)),
            rvalue(phi, "phi", index_uni(n)), base_rng__),
          "assigning variable y_predict", index_uni(n));
        current_statement__ = 23;
        assign(log_lhood,
          neg_binomial_2_log_lpmf<false>(rvalue(y, "y", index_uni(n)),
            rvalue(lam, "lam", index_uni(n)),
            rvalue(phi, "phi", index_uni(n))),
          "assigning variable log_lhood", index_uni(n));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y_predict[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(log_lhood[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> diff;
      diff = std::vector<double>(D, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      diff = context__.vals_r("diff");
      double a0;
      a0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      a0 = context__.vals_r("a0")[(1 - 1)];
      double a1;
      a1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      a1 = context__.vals_r("a1")[(1 - 1)];
      std::vector<double> disease_disp;
      disease_disp = std::vector<double>(disease_disp_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      disease_disp = context__.vals_r("disease_disp");
      std::vector<double> disease_disp_free__;
      disease_disp_free__ = std::vector<double>(disease_disp_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= disease_disp_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(disease_disp_free__,
          stan::math::lb_free(disease_disp[(sym1__ - 1)], 0),
          "assigning variable disease_disp_free__", index_uni(sym1__));
      }
      std::vector<double> batch_mu;
      batch_mu = std::vector<double>(B, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 5;
      batch_mu = context__.vals_r("batch_mu");
      std::vector<double> batch_disp;
      batch_disp = std::vector<double>(B, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 6;
      batch_disp = context__.vals_r("batch_disp");
      std::vector<double> batch_disp_free__;
      batch_disp_free__ = std::vector<double>(B, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        current_statement__ = 6;
        assign(batch_disp_free__,
          stan::math::lb_free(batch_disp[(sym1__ - 1)], 0),
          "assigning variable batch_disp_free__", index_uni(sym1__));
      }
      double control_mu;
      control_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      control_mu = context__.vals_r("control_mu")[(1 - 1)];
      double control_mu_free__;
      control_mu_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      control_mu_free__ = stan::math::offset_multiplier_free(control_mu,
                            control_loc, 3);
      double control_sigma;
      control_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      control_sigma = context__.vals_r("control_sigma")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> control;
      control = Eigen::Matrix<double, -1, 1>(C);
      stan::math::fill(control, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> control_flat__;
        current_statement__ = 9;
        control_flat__ = context__.vals_r("control");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
          current_statement__ = 9;
          assign(control, control_flat__[(pos__ - 1)],
            "assigning variable control", index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> control_free__;
      control_free__ = Eigen::Matrix<double, -1, 1>(C);
      stan::math::fill(control_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        current_statement__ = 9;
        assign(control_free__,
          stan::math::offset_multiplier_free(control[(sym1__ - 1)],
            control_mu, control_sigma),
          "assigning variable control_free__", index_uni(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(diff[(sym1__ - 1)]);
      }
      vars__.emplace_back(a0);
      vars__.emplace_back(a1);
      for (int sym1__ = 1; sym1__ <= disease_disp_1dim__; ++sym1__) {
        vars__.emplace_back(disease_disp_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        vars__.emplace_back(batch_mu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
        vars__.emplace_back(batch_disp_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(control_mu_free__);
      vars__.emplace_back(control_sigma);
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        vars__.emplace_back(control_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"diff", "a0", "a1", "disease_disp",
      "batch_mu", "batch_disp", "control_mu", "control_sigma", "control",
      "lam", "phi", "alpha", "y_predict", "log_lhood"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(D)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(disease_disp_1dim__)},
      std::vector<size_t>{static_cast<size_t>(B)},
      std::vector<size_t>{static_cast<size_t>(B)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "diff" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "a0");
    param_names__.emplace_back(std::string() + "a1");
    for (int sym1__ = 1; sym1__ <= disease_disp_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "disease_disp" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "batch_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "batch_disp" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "control_mu");
    param_names__.emplace_back(std::string() + "control_sigma");
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "control" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lam" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lhood" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "diff" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "a0");
    param_names__.emplace_back(std::string() + "a1");
    for (int sym1__ = 1; sym1__ <= disease_disp_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "disease_disp" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "batch_mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= B; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "batch_disp" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "control_mu");
    param_names__.emplace_back(std::string() + "control_sigma");
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "control" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lam" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lhood" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"diff\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"disease_disp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(disease_disp_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"batch_mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"batch_disp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"control_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"control_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"control\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"lam\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lhood\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"diff\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"a0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"disease_disp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(disease_disp_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"batch_mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"batch_disp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"control_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"control_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"control\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"lam\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lhood\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = disease_single_model_namespace::disease_single_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return disease_single_model_namespace::profiles__;
}

#endif


