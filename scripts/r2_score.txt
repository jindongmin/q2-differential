(birdman3.8) [djin@rustyamd2 scripts]$ ipython
Python 3.8.10 | packaged by conda-forge | (default, May 11 2021, 07:01:05) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.26.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import arviz as az

In [2]: import biom

In [3]: from arviz import r2_score

In [4]: inf = az.InferenceData.from_netcdf('test.nc')

In [5]: table = biom.load_table('../q2_differential/tests/data/table36new.biom')

In [6]: y_obs = table.matrix_data.todense().T.astype(int)

In [7]: y_pred = inf.posterior_predictive["y_predict"].stack(sample=["chain", "draw"]).values.T

In [8]: r2_score(y_obs, y_pred[1])
Out[8]: 
r2        0.636303
r2_std    0.206878
dtype: float64

In [9]: r2_score(y_obs, y_pred[2])
Out[9]: 
r2        0.695013
r2_std    0.145193
dtype: float64

In [10]: r2_score(y_obs, y_pred[3])
Out[10]: 
r2        0.463296
r2_std    0.256059
dtype: float64

In [11]: r2_score(y_obs, y_pred[4])
Out[11]: 
r2        0.494475
r2_std    0.254416
dtype: float64

In [12]: r2_score(y_obs, y_pred[5])
Out[12]: 
r2        0.503049
r2_std    0.236465
dtype: float64

In [13]: y_obs
Out[13]: 
matrix([[ 0,  6, 12, 18, 24, 30],
        [ 1,  7, 13, 19, 25, 31],
        [ 2,  8, 14, 20, 26, 32],
        [ 3,  9, 15, 21, 27, 33],
        [ 4, 10, 16, 22, 28, 34],
        [ 5, 11, 17, 23, 29, 35]])

In [14]: y_pred
Out[14]: 
array([[[ 4.,  7., 13., 12., 53., 14.],
        [ 0., 13.,  7., 16., 21., 30.],
        [ 2., 36., 20., 30.,  6., 14.],
        [ 0., 10.,  3., 14., 15., 41.],
        [ 1., 13.,  1., 26., 41., 15.],
        [ 2.,  8.,  7., 41., 56., 40.]],

       [[ 0., 23., 10., 20., 23., 47.],
        [ 1., 28., 17., 13., 29., 20.],
        [ 8., 18.,  7., 18., 17., 35.],
        [ 2., 67., 18., 14., 40., 65.],
        [ 7., 18.,  5., 19., 47., 53.],
        [ 8., 17.,  5., 50., 13., 71.]],

       [[ 2., 14., 18., 15.,  6., 27.],
        [ 0., 10., 35., 13., 34., 45.],
        [11., 10., 10., 15., 33., 31.],
        [ 4.,  5., 18., 18.,  4., 54.],
        [ 0.,  5., 21., 31., 10., 53.],
        [ 5., 18.,  6., 41., 18., 53.]],

       ...,

       [[ 5.,  3.,  8., 15., 27., 25.],
        [ 8.,  9., 27., 21., 34., 72.],
        [ 0.,  8., 14., 35., 14., 21.],
        [ 0.,  1., 19., 10., 14., 20.],
        [ 0., 38., 50.,  5., 46., 23.],
        [ 6.,  8., 22., 46., 53., 49.]],

       [[ 4.,  2., 18., 20., 22., 24.],
        [ 1.,  6., 19., 44., 43., 57.],
        [20.,  7., 23., 33., 29., 24.],
        [ 3.,  8., 10., 19., 24., 11.],
        [ 0.,  3., 23., 19.,  5., 23.],
        [ 8.,  6.,  6., 74., 18., 39.]],

       [[ 0., 10.,  4., 13., 31., 36.],
        [ 0.,  7.,  1., 10., 18., 37.],
        [ 6., 16., 22., 73., 32., 25.],
        [ 0.,  6., 13., 19., 38., 15.],
        [ 0., 10., 28., 13., 19., 16.],
        [ 4.,  4., 24.,  3., 63., 49.]]])

In [15]: 
